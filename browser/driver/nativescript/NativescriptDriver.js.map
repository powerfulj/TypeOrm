{"version":3,"sources":["../browser/src/driver/nativescript/NativescriptDriver.ts"],"names":[],"mappings":"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","file":"NativescriptDriver.js","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\r\nimport {NativescriptConnectionOptions} from \"./NativescriptConnectionOptions\";\r\nimport {NativescriptQueryRunner} from \"./NativescriptQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS within Nativescript.\r\n */\r\nexport class NativescriptDriver extends AbstractSqliteDriver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: NativescriptConnectionOptions;\r\n\r\n    /**\r\n     * Nativescript driver module\r\n     * this is most likely `nativescript-sqlite`\r\n     * but user can pass his own\r\n     */\r\n    driver: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        this.connection = connection;\r\n        this.options = connection.options as NativescriptConnectionOptions;\r\n        this.database = this.options.database;\r\n        this.driver = this.options.driver;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database) {\r\n            throw new DriverOptionNotSetError(\"database\");\r\n        }\r\n\r\n        // load sqlite package\r\n        this.loadDependencies();\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined;\r\n            this.databaseConnection.close().then(ok).catch(fail);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\r\n        if (!this.queryRunner) {\r\n            this.queryRunner = new NativescriptQueryRunner(this);\r\n        }\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n        }\r\n\r\n        return super.normalizeType(column);\r\n    }\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>((ok, fail) => {\r\n            const options = Object.assign({}, {\r\n                name: this.options.database,\r\n            }, this.options.extra || {});\r\n\r\n            new this.sqlite(options.name, (err: Error, db: any): any => {\r\n                if (err) return fail(err);\r\n\r\n                // use object mode to work with TypeORM\r\n                db.resultType(this.sqlite.RESULTSASOBJECT);\r\n\r\n\r\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                // working properly. this also makes onDelete work with sqlite.\r\n                db.execSQL(`PRAGMA foreign_keys = ON;`, [], (err: Error, result: any): any => {\r\n                    if (err) return fail(err);\r\n                    // We are all set\r\n                    ok(db);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        this.sqlite = this.driver;\r\n        if (!this.driver) {\r\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}