{"version":3,"sources":["../browser/src/driver/cockroachdb/CockroachQueryRunner.ts"],"names":[],"mappings":"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","file":"CockroachQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {Table} from \"../../schema-builder/table/Table\";\r\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\r\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {View} from \"../../schema-builder/view/View\";\r\nimport {Query} from \"../Query\";\r\nimport {CockroachDriver} from \"./CockroachDriver\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\r\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\r\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {PromiseUtils} from \"../../\";\r\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\r\nimport {ColumnType} from \"../../index\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class CockroachQueryRunner extends BaseQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: CockroachDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>;\r\n\r\n    /**\r\n     * Special callback provided by a driver used to release a created connection.\r\n     */\r\n    protected releaseCallback: Function;\r\n\r\n    /**\r\n     * Stores all executed queries to be able to run them again if transaction fails.\r\n     */\r\n    protected queries: { query: string, parameters?: any[] }[] = [];\r\n\r\n    /**\r\n     * Indicates if running queries must be stored\r\n     */\r\n    protected storeQueries: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: CockroachDriver, mode: \"master\"|\"slave\" = \"master\") {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.mode = mode;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise;\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\r\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n\r\n        } else { // master\r\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n        }\r\n\r\n        return this.databaseConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true;\r\n        if (this.releaseCallback)\r\n            this.releaseCallback();\r\n\r\n        const index = this.driver.connectedQueryRunners.indexOf(this);\r\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n        await this.query(\"SAVEPOINT cockroach_restart\");\r\n        if (isolationLevel) {\r\n            await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\r\n        }\r\n        this.storeQueries = true;\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        this.storeQueries = false;\r\n\r\n        try {\r\n            await this.query(\"RELEASE SAVEPOINT cockroach_restart\");\r\n            await this.query(\"COMMIT\");\r\n            this.queries = [];\r\n            this.isTransactionActive = false;\r\n\r\n        } catch (e) {\r\n            if (e.code === \"40001\") {\r\n                await this.query(\"ROLLBACK TO SAVEPOINT cockroach_restart\");\r\n                await PromiseUtils.runInSequence(this.queries, q => this.query(q.query, q.parameters));\r\n                await this.commitTransaction();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        this.storeQueries = false;\r\n        await this.query(\"ROLLBACK\");\r\n        this.queries = [];\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[], options?: {  }): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect();\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const queryStartTime = +new Date();\r\n\r\n                databaseConnection.query(query, parameters, (err: any, result: any) => {\r\n                    if (this.isTransactionActive && this.storeQueries)\r\n                        this.queries.push({ query, parameters });\r\n\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                    const queryEndTime = +new Date();\r\n                    const queryExecutionTime = queryEndTime - queryStartTime;\r\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                    if (err) {\r\n                        if (err.code !== \"40001\")\r\n                            this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                        fail(new QueryFailedError(query, parameters, err));\r\n                    } else {\r\n                        switch (result.command) {\r\n                            case \"DELETE\":\r\n                                // for DELETE query additionally return number of affected rows\r\n                                ok([result.rows, result.rowCount]);\r\n                                break;\r\n                            default:\r\n                                ok(result.rows);\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        const QueryStream = this.driver.loadStreamDependency();\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect();\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const stream = databaseConnection.query(new QueryStream(query, parameters));\r\n                if (onEnd) stream.on(\"end\", onEnd);\r\n                if (onError) stream.on(\"error\", onError);\r\n                ok(stream);\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT * FROM \"pg_database\" WHERE \"datname\" = '${database}'`);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\r\n        const parsedTableName = this.parseTableName(tableOrName);\r\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName}`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\r\n        const parsedTableName = this.parseTableName(tableOrName);\r\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName} AND \"column_name\" = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\r\n        const up = `CREATE DATABASE ${ifNotExist ? \"IF NOT EXISTS \" : \"\"} \"${database}\"`;\r\n        const down = `DROP DATABASE \"${database}\"`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = `DROP DATABASE ${ifExist ? \"IF EXISTS \" : \"\"} \"${database}\"`;\r\n        const down = `CREATE DATABASE \"${database}\"`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\r\n        const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"` : `CREATE SCHEMA \"${schema}\"`;\r\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\r\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\r\n        const up = ifExist ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}` : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\r\n        const down = `CREATE SCHEMA \"${schema}\"`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table);\r\n            if (isTableExist) return Promise.resolve();\r\n        }\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        table.columns\r\n            .filter(column => column.isGenerated && column.generationStrategy === \"increment\")\r\n            .forEach(column => {\r\n                upQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n                downQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n            });\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys));\r\n        downQueries.push(this.dropTableSql(table));\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        if (createIndices) {\r\n            table.indices\r\n                .filter(index => !index.isUnique)\r\n                .forEach(index => {\r\n\r\n                    // new index may be passed without name. In this case we generate index name manually.\r\n                    if (!index.name)\r\n                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n                    upQueries.push(this.createIndexSql(table, index));\r\n                    downQueries.push(this.dropIndexSql(table, index));\r\n                });\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(target: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(target);\r\n            if (!isTableExist) return Promise.resolve();\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys;\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        const table = await this.getCachedTable(tableName);\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // foreign keys must be dropped before indices, because fk's rely on indices\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach(index => {\r\n                upQueries.push(this.dropIndexSql(table, index));\r\n                downQueries.push(this.createIndexSql(table, index));\r\n            });\r\n        }\r\n\r\n        upQueries.push(this.dropTableSql(table));\r\n        downQueries.push(this.createTableSql(table, createForeignKeys));\r\n\r\n        table.columns\r\n            .filter(column => column.isGenerated && column.generationStrategy === \"increment\")\r\n            .forEach(column => {\r\n                upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n                downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n            });\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(view: View): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        upQueries.push(this.createViewSql(view));\r\n        upQueries.push(await this.insertViewDefinitionSql(view));\r\n        downQueries.push(this.dropViewSql(view));\r\n        downQueries.push(await this.deleteViewDefinitionSql(view));\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View|string): Promise<void> {\r\n        const viewName = target instanceof View ? target.name : target;\r\n        const view = await this.getCachedView(viewName);\r\n\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        upQueries.push(await this.deleteViewDefinitionSql(view));\r\n        upQueries.push(this.dropViewSql(view));\r\n        downQueries.push(await this.insertViewDefinitionSql(view));\r\n        downQueries.push(this.createViewSql(view));\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\r\n        const newTable = oldTable.clone();\r\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\r\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\r\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\r\n\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO \"${newTableName}\"`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO \"${oldTableName}\"`));\r\n\r\n        // rename column primary key constraint\r\n        if (newTable.primaryColumns.length > 0) {\r\n            const columnNames = newTable.primaryColumns.map(column => column.name);\r\n\r\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\r\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\r\n\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\r\n        }\r\n\r\n        // rename unique constraints\r\n        newTable.uniques.forEach(unique => {\r\n            // build new constraint name\r\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\r\n\r\n            // build queries\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\r\n\r\n            // replace constraint name\r\n            unique.name = newUniqueName;\r\n        });\r\n\r\n        // rename index constraints\r\n        newTable.indices.forEach(index => {\r\n            // build new constraint name\r\n            const schema = this.extractSchema(newTable);\r\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\r\n\r\n            // build queries\r\n            const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\r\n            const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\r\n            upQueries.push(new Query(up));\r\n            downQueries.push(new Query(down));\r\n\r\n            // replace constraint name\r\n            index.name = newIndexName;\r\n        });\r\n\r\n        // rename foreign key constraints\r\n        newTable.foreignKeys.forEach(foreignKey => {\r\n            // build new constraint name\r\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\r\n\r\n            // build queries\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\r\n\r\n            // replace constraint name\r\n            foreignKey.name = newForeignKeyName;\r\n        });\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        if (column.generationStrategy === \"increment\") {\r\n            throw new Error(`Adding sequential generated columns into existing table is not supported`);\r\n        }\r\n\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\r\n\r\n        // create or update primary key constraint\r\n        if (column.isPrimary) {\r\n            const primaryColumns = clonedTable.primaryColumns;\r\n            // if table already have primary key, me must drop it and recreate again\r\n            // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\r\n            if (primaryColumns.length > 0) {\r\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n            }\r\n\r\n            primaryColumns.push(column);\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n        }\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            // CockroachDB stores unique indices as UNIQUE constraints\r\n            if (columnIndex.isUnique) {\r\n                const unique = new TableUnique({\r\n                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, columnIndex.columnNames),\r\n                    columnNames: columnIndex.columnNames\r\n                });\r\n                upQueries.push(this.createUniqueConstraintSql(table, unique));\r\n                downQueries.push(this.dropIndexSql(table, unique));\r\n                clonedTable.uniques.push(unique);\r\n\r\n            } else {\r\n                upQueries.push(this.createIndexSql(table, columnIndex));\r\n                downQueries.push(this.dropIndexSql(table, columnIndex));\r\n            }\r\n        }\r\n\r\n        // create unique constraint\r\n        if (column.isUnique) {\r\n            const uniqueConstraint = new TableUnique({\r\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\r\n                columnNames: [column.name]\r\n            });\r\n            clonedTable.uniques.push(uniqueConstraint);\r\n            upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\r\n            downQueries.push(this.dropIndexSql(table, uniqueConstraint.name!)); // CockroachDB creates indices for unique constraints\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.addColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(columns, column => this.addColumn(tableOrName, column));\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        let newColumn;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        let clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\r\n            ? oldTableColumnOrName\r\n            : table.columns.find(column => column.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\r\n            // To avoid data conversion, we just recreate column\r\n            await this.dropColumn(table, oldColumn);\r\n            await this.addColumn(table, newColumn);\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone();\r\n\r\n        } else {\r\n            if (oldColumn.name !== newColumn.name) {\r\n                // rename column\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\r\n\r\n                // rename column primary key constraint\r\n                if (oldColumn.isPrimary === true) {\r\n                    const primaryColumns = clonedTable.primaryColumns;\r\n\r\n                    // build old primary constraint name\r\n                    const columnNames = primaryColumns.map(column => column.name);\r\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\r\n\r\n                    // replace old column name with new column name\r\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\r\n                    columnNames.push(newColumn.name);\r\n\r\n                    // build new primary constraint name\r\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\r\n\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\r\n                }\r\n\r\n                // rename unique constraints\r\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\r\n                    // build new constraint name\r\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\r\n                    unique.columnNames.push(newColumn.name);\r\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\r\n\r\n                    // replace constraint name\r\n                    unique.name = newUniqueName;\r\n                });\r\n\r\n                // rename index constraints\r\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\r\n                    // build new constraint name\r\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\r\n                    index.columnNames.push(newColumn.name);\r\n                    const schema = this.extractSchema(table);\r\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\r\n\r\n                    // build queries\r\n                    const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\r\n                    const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\r\n                    upQueries.push(new Query(up));\r\n                    downQueries.push(new Query(down));\r\n\r\n                    // replace constraint name\r\n                    index.name = newIndexName;\r\n                });\r\n\r\n                // rename foreign key constraints\r\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\r\n                    // build new constraint name\r\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\r\n                    foreignKey.columnNames.push(newColumn.name);\r\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\r\n\r\n                    // replace constraint name\r\n                    foreignKey.name = newForeignKeyName;\r\n                });\r\n\r\n                // rename old column in the Table object\r\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\r\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\r\n                oldColumn.name = newColumn.name;\r\n            }\r\n\r\n            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\r\n            }\r\n\r\n            if (oldColumn.isNullable !== newColumn.isNullable) {\r\n                if (newColumn.isNullable) {\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\r\n                } else {\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\r\n                }\r\n            }\r\n\r\n            if (oldColumn.comment !== newColumn.comment) {\r\n                upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" IS '${newColumn.comment}'`));\r\n                downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" IS '${oldColumn.comment}'`));\r\n            }\r\n\r\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\r\n                const primaryColumns = clonedTable.primaryColumns;\r\n\r\n                // if primary column state changed, we must always drop existed constraint.\r\n                if (primaryColumns.length > 0) {\r\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                }\r\n\r\n                if (newColumn.isPrimary === true) {\r\n                    primaryColumns.push(newColumn);\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = true;\r\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n\r\n                } else {\r\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\r\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\r\n\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = false;\r\n\r\n                    // if we have another primary keys, we must recreate constraint.\r\n                    if (primaryColumns.length > 0) {\r\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique) {\r\n                    const uniqueConstraint = new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\r\n                        columnNames: [newColumn.name]\r\n                    });\r\n                    clonedTable.uniques.push(uniqueConstraint);\r\n                    upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\r\n                    // CockroachDB creates index for UNIQUE constraint.\r\n                    // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\r\n                    downQueries.push(this.dropIndexSql(table, uniqueConstraint));\r\n\r\n                } else {\r\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\r\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\r\n                    });\r\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\r\n                    // CockroachDB creates index for UNIQUE constraint.\r\n                    // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\r\n                    upQueries.push(this.dropIndexSql(table, uniqueConstraint!));\r\n                    downQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint!));\r\n                }\r\n            }\r\n\r\n            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\r\n                if (newColumn.isGenerated) {\r\n                    if (newColumn.generationStrategy === \"increment\") {\r\n                        throw new Error(`Adding sequential generated columns into existing table is not supported`);\r\n\r\n                    } else if (newColumn.generationStrategy === \"rowid\") {\r\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT unique_rowid()`));\r\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\r\n                    }\r\n\r\n                } else {\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT unique_rowid()`));\r\n                }\r\n            }\r\n\r\n            if (newColumn.default !== oldColumn.default) {\r\n                if (newColumn.default !== null && newColumn.default !== undefined) {\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\r\n\r\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\r\n                    } else {\r\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\r\n                    }\r\n\r\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(changedColumns, changedColumn => this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn));\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\r\n        if (!column)\r\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\r\n\r\n        const clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // drop primary key constraint\r\n        // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\r\n        if (column.isPrimary) {\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\r\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n\r\n            // update column in table\r\n            const tableColumn = clonedTable.findColumnByName(column.name);\r\n            tableColumn!.isPrimary = false;\r\n\r\n            // if primary key have multiple columns, we must recreate it without dropped column\r\n            if (clonedTable.primaryColumns.length > 0) {\r\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\r\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\r\n            }\r\n        }\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\r\n            upQueries.push(this.dropIndexSql(table, columnIndex));\r\n            downQueries.push(this.createIndexSql(table, columnIndex));\r\n        }\r\n\r\n        // drop column check\r\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\r\n        if (columnCheck) {\r\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\r\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\r\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\r\n        }\r\n\r\n        // drop column unique\r\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\r\n        if (columnUnique) {\r\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\r\n            upQueries.push(this.dropIndexSql(table, columnUnique.name!)); // CockroachDB creates indices for unique constraints\r\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\r\n        }\r\n\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\r\n\r\n        if (column.generationStrategy === \"increment\") {\r\n            upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n            downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.removeColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(columns, column => this.dropColumn(tableOrName, column));\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n\r\n        const up = this.createPrimaryKeySql(table, columnNames);\r\n\r\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\r\n        clonedTable.columns.forEach(column => {\r\n            if (columnNames.find(columnName => columnName === column.name))\r\n                column.isPrimary = true;\r\n        });\r\n        const down = this.dropPrimaryKeySql(clonedTable);\r\n\r\n        await this.executeQueries(up, down);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const columnNames = columns.map(column => column.name);\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // if table already have primary columns, we must drop them.\r\n        const primaryColumns = clonedTable.primaryColumns;\r\n        if (primaryColumns.length > 0) {\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\r\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\r\n        }\r\n\r\n        // update columns in table.\r\n        clonedTable.columns\r\n            .filter(column => columnNames.indexOf(column.name) !== -1)\r\n            .forEach(column => column.isPrimary = true);\r\n\r\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\r\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const up = this.dropPrimaryKeySql(table);\r\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\r\n        await this.executeQueries(up, down);\r\n        table.primaryColumns.forEach(column => {\r\n            column.isPrimary = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraint.\r\n     */\r\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!uniqueConstraint.name)\r\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\r\n\r\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\r\n        // CockroachDB creates index for UNIQUE constraint.\r\n        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\r\n        const down = this.dropIndexSql(table, uniqueConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.addUniqueConstraint(uniqueConstraint);\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraints.\r\n     */\r\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(uniqueConstraints, uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraint.\r\n     */\r\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\r\n        if (!uniqueConstraint)\r\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\r\n\r\n        // CockroachDB creates index for UNIQUE constraint.\r\n        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\r\n        const up = this.dropIndexSql(table, uniqueConstraint);\r\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.removeUniqueConstraint(uniqueConstraint);\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraints.\r\n     */\r\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(uniqueConstraints, uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraint.\r\n     */\r\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!checkConstraint.name)\r\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\r\n\r\n        const up = this.createCheckConstraintSql(table, checkConstraint);\r\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.addCheckConstraint(checkConstraint);\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraints.\r\n     */\r\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\r\n        if (!checkConstraint)\r\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\r\n\r\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\r\n        const down = this.createCheckConstraintSql(table, checkConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.removeCheckConstraint(checkConstraint);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\r\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\r\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey);\r\n        const down = this.dropForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.addForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(foreignKeys, foreignKey => this.createForeignKey(tableOrName, foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\r\n        if (!foreignKey)\r\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey);\r\n        const down = this.createForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.removeForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(foreignKeys, foreignKey => this.dropForeignKey(tableOrName, foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name)\r\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n\r\n        // CockroachDB stores unique indices and UNIQUE constraints\r\n        if (index.isUnique) {\r\n            const unique = new TableUnique({\r\n                name: index.name,\r\n                columnNames: index.columnNames\r\n            });\r\n            const up = this.createUniqueConstraintSql(table, unique);\r\n            // CockroachDB also creates index for UNIQUE constraints.\r\n            // We can't drop UNIQUE constraint with DROP CONSTRAINT. We must use DROP INDEX ... CASCADE instead.\r\n            const down = this.dropIndexSql(table, unique);\r\n            await this.executeQueries(up, down);\r\n            table.addUniqueConstraint(unique);\r\n\r\n        } else {\r\n            const up = this.createIndexSql(table, index);\r\n            const down = this.dropIndexSql(table, index);\r\n            await this.executeQueries(up, down);\r\n            table.addIndex(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(indices, index => this.createIndex(tableOrName, index));\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\r\n        if (!index)\r\n            throw new Error(`Supplied index was not found in table ${table.name}`);\r\n\r\n        const up = this.dropIndexSql(table, index);\r\n        const down = this.createIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.removeIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(indices, index => this.dropIndex(tableOrName, index));\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        const schemas: string[] = [];\r\n        this.connection.entityMetadatas\r\n            .filter(metadata => metadata.schema)\r\n            .forEach(metadata => {\r\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\r\n                if (!isSchemaExist)\r\n                    schemas.push(metadata.schema!);\r\n            });\r\n        schemas.push(this.driver.options.schema || \"current_schema()\");\r\n        const schemaNamesString = schemas.map(name => {\r\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\r\n        }).join(\", \");\r\n\r\n        await this.startTransaction();\r\n        try {\r\n            const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\r\n                `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString})`;\r\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\r\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || table_schema || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"information_schema\".\"tables\" WHERE \"table_schema\" IN (${schemaNamesString})`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            const selectSequenceDropsQuery = `SELECT 'DROP SEQUENCE \"' || sequence_schema || '\".\"' || sequence_name || '\";' as \"query\" FROM \"information_schema\".\"sequences\" WHERE \"sequence_schema\" IN (${schemaNamesString})`;\r\n            const sequenceDropQueries: ObjectLiteral[] = await this.query(selectSequenceDropsQuery);\r\n            await Promise.all(sequenceDropQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\r\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\r\n        if (!hasTable)\r\n            return Promise.resolve([]);\r\n\r\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\r\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\r\n\r\n        const viewsCondition = viewNames.map(viewName => {\r\n            let [schema, name] = viewName.split(\".\");\r\n            if (!name) {\r\n                name = schema;\r\n                schema = this.driver.options.schema || currentSchema;\r\n            }\r\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\r\n        }).join(\" OR \");\r\n\r\n        const query = `SELECT \"t\".*, \"v\".\"check_option\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\r\n            `INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\r\n        const dbViews = await this.query(query);\r\n        return dbViews.map((dbView: any) => {\r\n            const view = new View();\r\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\r\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\r\n            view.expression = dbView[\"value\"];\r\n            return view;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\r\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\r\n\r\n        const tablesCondition = tableNames.map(tableName => {\r\n            let [schema, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = schema;\r\n                schema = this.driver.options.schema || currentSchema;\r\n            }\r\n            return `(\"table_schema\" = '${schema}' AND \"table_name\" = '${name}')`;\r\n        }).join(\" OR \");\r\n        const tablesSql = `SELECT * FROM \"information_schema\".\"tables\" WHERE ` + tablesCondition;\r\n        const columnsSql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"is_hidden\" = 'NO' AND ` + tablesCondition;\r\n\r\n        const constraintsCondition = tableNames.map(tableName => {\r\n            let [schema, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = schema;\r\n                schema = this.driver.options.schema || currentSchema;\r\n            }\r\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${name}')`;\r\n        }).join(\" OR \");\r\n\r\n        const constraintsSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\r\n            `CASE \"cnst\".\"contype\" WHEN 'x' THEN pg_get_constraintdef(\"cnst\".\"oid\", true) ELSE \"cnst\".\"consrc\" END AS \"expression\", ` +\r\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\r\n            `FROM \"pg_constraint\" \"cnst\" ` +\r\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\r\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\r\n            `WHERE \"t\".\"relkind\" = 'r' AND (${constraintsCondition})`;\r\n\r\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\r\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\r\n            `\"types\".\"typname\" AS \"type_name\" ` +\r\n            `FROM \"pg_class\" \"t\" ` +\r\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\r\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\r\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\r\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\r\n            `WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\r\n\r\n        const foreignKeysCondition = tableNames.map(tableName => {\r\n            let [schema, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = schema;\r\n                schema = this.driver.options.schema || currentSchema;\r\n            }\r\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"cl\".\"relname\" = '${name}')`;\r\n        }).join(\" OR \");\r\n        const foreignKeysSql = `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\r\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", \"con\".\"confupdtype\" AS \"on_update\" ` +\r\n            `FROM ( ` +\r\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", \"cl\".\"relname\", ` +\r\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\r\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\r\n            `FROM \"pg_class\" \"cl\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\r\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\r\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\r\n            `) \"con\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\r\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`;\r\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create tables for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const table = new Table();\r\n\r\n            // We do not need to join schema name, when database is by default.\r\n            // In this case we need local variable `tableFullName` for below comparision.\r\n            const schema = dbTable[\"table_schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"table_schema\"];\r\n            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\r\n            const tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = await Promise.all(dbColumns\r\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName)\r\n                .map(async dbColumn => {\r\n\r\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\r\n                        return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\r\n                    });\r\n\r\n                    const tableColumn = new TableColumn();\r\n                    tableColumn.name = dbColumn[\"column_name\"];\r\n\r\n                    tableColumn.type = dbColumn[\"crdb_sql_type\"].toLowerCase();\r\n                    if (dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") !== -1) {\r\n                        tableColumn.collation = dbColumn[\"crdb_sql_type\"].substr(dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") + \"COLLATE\".length + 1, dbColumn[\"crdb_sql_type\"].length);\r\n                        tableColumn.type = tableColumn.type.substr(0, dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") - 1);\r\n                    }\r\n\r\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\r\n                        tableColumn.type = tableColumn.type.substr(0, tableColumn.type.indexOf(\"(\"));\r\n\r\n                    if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\") {\r\n                        if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\r\n                            tableColumn.precision = parseInt(dbColumn[\"numeric_precision\"]);\r\n                        } else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\r\n                            tableColumn.precision = undefined;\r\n                        }\r\n                        if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\r\n                            tableColumn.scale = parseInt(dbColumn[\"numeric_scale\"]);\r\n                        } else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\r\n                            tableColumn.scale = undefined;\r\n                        }\r\n                    }\r\n\r\n                    if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\r\n                        tableColumn.isArray = true;\r\n                        const type = dbColumn[\"crdb_sql_type\"].replace(\"[]\", \"\").toLowerCase();\r\n                        tableColumn.type = this.connection.driver.normalizeType({type: type});\r\n                    }\r\n\r\n                    // check only columns that have length property\r\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"character_maximum_length\"]) {\r\n                        const length = dbColumn[\"character_maximum_length\"].toString();\r\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\r\n                    }\r\n                    tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\r\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"PRIMARY\");\r\n\r\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"UNIQUE\");\r\n                    const isConstraintComposite = uniqueConstraint\r\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"constraint_type\"] === \"UNIQUE\"\r\n                            && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\r\n                            && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"])\r\n                        : false;\r\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\r\n\r\n                    if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\r\n                        if (dbColumn[\"column_default\"] === \"unique_rowid()\") {\r\n                            tableColumn.isGenerated = true;\r\n                            tableColumn.generationStrategy = \"rowid\";\r\n\r\n                        } else if (dbColumn[\"column_default\"].indexOf(\"nextval\") !== -1) {\r\n                            tableColumn.isGenerated = true;\r\n                            tableColumn.generationStrategy = \"increment\";\r\n\r\n                        } else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\") {\r\n                            tableColumn.isGenerated = true;\r\n                            tableColumn.generationStrategy = \"uuid\";\r\n\r\n                        } else {\r\n                            tableColumn.default = dbColumn[\"column_default\"].replace(/:::.*/, \"\");\r\n                        }\r\n                    }\r\n\r\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\r\n                    if (dbColumn[\"character_set_name\"])\r\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\r\n\r\n                    return tableColumn;\r\n                }));\r\n\r\n            // find unique constraints of table, group them by constraint name and build TableUnique.\r\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\r\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\r\n                    && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\r\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\r\n\r\n            table.uniques = tableUniqueConstraints.map(constraint => {\r\n                const uniques = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\r\n                return new TableUnique({\r\n                    name: constraint[\"constraint_name\"],\r\n                    columnNames: uniques.map(u => u[\"column_name\"])\r\n                });\r\n            });\r\n\r\n            // find check constraints of table, group them by constraint name and build TableCheck.\r\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\r\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\r\n                    && dbConstraint[\"constraint_type\"] === \"CHECK\";\r\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\r\n\r\n            table.checks = tableCheckConstraints.map(constraint => {\r\n                const checks = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\r\n                return new TableCheck({\r\n                    name: constraint[\"constraint_name\"],\r\n                    columnNames: checks.map(c => c[\"column_name\"]),\r\n                    expression: constraint[\"expression\"] // column names are not escaped, may cause problems\r\n                });\r\n            });\r\n\r\n            // find exclusion constraints of table, group them by constraint name and build TableExclusion.\r\n            const tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\r\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\r\n                    && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\r\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\r\n\r\n            table.exclusions = tableExclusionConstraints.map(constraint => {\r\n                return new TableExclusion({\r\n                    name: constraint[\"constraint_name\"],\r\n                    expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\r\n                });\r\n            });\r\n\r\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\r\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\r\n                return this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\r\n            }), dbForeignKey => dbForeignKey[\"constraint_name\"]);\r\n\r\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\r\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"]);\r\n\r\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\r\n                const schema = dbForeignKey[\"referenced_table_schema\"] === currentSchema ? undefined : dbTable[\"referenced_table_schema\"];\r\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\r\n\r\n                return new TableForeignKey({\r\n                    name: dbForeignKey[\"constraint_name\"],\r\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"column_name\"]),\r\n                    referencedTableName: referencedTableName,\r\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"referenced_column_name\"]),\r\n                    onDelete: dbForeignKey[\"on_delete\"],\r\n                    onUpdate: dbForeignKey[\"on_update\"]\r\n                });\r\n            });\r\n\r\n            // find index constraints of table, group them by constraint name and build TableIndex.\r\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\r\n                return this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\r\n            }), dbIndex => dbIndex[\"constraint_name\"]);\r\n\r\n            table.indices = tableIndexConstraints.map(constraint => {\r\n                const indices = dbIndices.filter(index => index[\"constraint_name\"] === constraint[\"constraint_name\"]);\r\n                return new TableIndex(<TableIndexOptions>{\r\n                    table: table,\r\n                    name: constraint[\"constraint_name\"],\r\n                    columnNames: indices.map(i => i[\"column_name\"]),\r\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\r\n                    where: constraint[\"condition\"],\r\n                    isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0),\r\n                    isFulltext: false\r\n                });\r\n            });\r\n\r\n            return table;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Builds create table sql.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(\", \");\r\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\r\n\r\n        table.columns\r\n            .filter(column => column.isUnique)\r\n            .forEach(column => {\r\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\r\n                if (!isUniqueExist)\r\n                    table.uniques.push(new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\r\n                        columnNames: [column.name]\r\n                    }));\r\n            });\r\n\r\n        table.indices\r\n            .filter(index => index.isUnique)\r\n            .forEach(index => {\r\n                table.uniques.push(new TableUnique({\r\n                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, index.columnNames),\r\n                    columnNames: index.columnNames\r\n                }));\r\n            });\r\n\r\n        if (table.uniques.length > 0) {\r\n            const uniquesSql = table.uniques.map(unique => {\r\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\r\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${uniquesSql}`;\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks.map(check => {\r\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\r\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${checksSql}`;\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys.map(fk => {\r\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                if (!fk.name)\r\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\r\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n\r\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\r\n                if (fk.onDelete)\r\n                    constraint += ` ON DELETE ${fk.onDelete}`;\r\n                if (fk.onUpdate)\r\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\r\n\r\n                return constraint;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${foreignKeysSql}`;\r\n        }\r\n\r\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryColumns.length > 0) {\r\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\r\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\r\n        }\r\n\r\n        sql += `)`;\r\n\r\n        return new Query(sql);\r\n    }\r\n\r\n    /**\r\n     * Extracts schema name from given Table object or table name string.\r\n     */\r\n    protected extractSchema(target: Table|string): string|undefined {\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(tableOrPath: Table|string): Query {\r\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\r\n    }\r\n\r\n    protected createViewSql(view: View): Query {\r\n        if (typeof view.expression === \"string\") {\r\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\r\n        } else {\r\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\r\n        }\r\n    }\r\n\r\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\r\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\r\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\r\n        const splittedName = view.name.split(\".\");\r\n        let schema = this.driver.options.schema || currentSchema;\r\n        let name = view.name;\r\n        if (splittedName.length === 2) {\r\n            schema = splittedName[0];\r\n            name = splittedName[1];\r\n        }\r\n\r\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\r\n        const [query, parameters] = this.connection.createQueryBuilder()\r\n            .insert()\r\n            .into(this.getTypeormMetadataTableName())\r\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\r\n            .getQueryAndParameters();\r\n\r\n        return new Query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Builds drop view sql.\r\n     */\r\n    protected dropViewSql(viewOrPath: View|string): Query {\r\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\r\n    }\r\n\r\n    /**\r\n     * Builds remove view sql.\r\n     */\r\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\r\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\r\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\r\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\r\n        const splittedName = viewName.split(\".\");\r\n        let schema = this.driver.options.schema || currentSchema;\r\n        let name = viewName;\r\n        if (splittedName.length === 2) {\r\n            schema = splittedName[0];\r\n            name = splittedName[1];\r\n        }\r\n\r\n        const qb = this.connection.createQueryBuilder();\r\n        const [query, parameters] = qb.delete()\r\n            .from(this.getTypeormMetadataTableName())\r\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\r\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\r\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\r\n            .getQueryAndParameters();\r\n\r\n        return new Query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     * UNIQUE indices creates as UNIQUE constraints.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): Query {\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        return new Query(`CREATE INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|TableUnique|string): Query {\r\n        let indexName = (indexOrName instanceof TableIndex || indexOrName instanceof TableUnique) ? indexOrName.name : indexOrName;\r\n        return new Query(`DROP INDEX ${this.escapePath(table)}@\"${indexName}\" CASCADE`);\r\n    }\r\n\r\n    /**\r\n     * Builds create primary key sql.\r\n     */\r\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\r\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\r\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop primary key sql.\r\n     */\r\n    protected dropPrimaryKeySql(table: Table): Query {\r\n        const columnNames = table.primaryColumns.map(column => column.name);\r\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create unique constraint sql.\r\n     */\r\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique|TableIndex): Query {\r\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop unique constraint sql.\r\n     */\r\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\r\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create check constraint sql.\r\n     */\r\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop check constraint sql.\r\n     */\r\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\r\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\r\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\r\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete)\r\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\r\n        if (foreignKey.onUpdate)\r\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n        return new Query(sql);\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\r\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds sequence name from given table and column.\r\n     */\r\n    protected buildSequenceName(table: Table, columnOrName: TableColumn|string, disableEscape?: true): string {\r\n        const columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\r\n        return disableEscape ? `${table.name}_${columnName}_seq` : `\"${table.name}_${columnName}_seq\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes given table or view path.\r\n     */\r\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\r\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\r\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\r\n\r\n        return tableName.split(\".\").map(i => {\r\n            return disableEscape ? i : `\"${i}\"`;\r\n        }).join(\".\");\r\n    }\r\n\r\n    /**\r\n     * Returns object with table schema and table name.\r\n     */\r\n    protected parseTableName(target: Table|string) {\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        if (tableName.indexOf(\".\") === -1) {\r\n            return {\r\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema()\",\r\n                tableName: `'${tableName}'`\r\n            };\r\n        } else {\r\n            return {\r\n                schema: `'${tableName.split(\".\")[0]}'`,\r\n                tableName: `'${tableName.split(\".\")[1]}'`\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(table: Table, column: TableColumn) {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n\r\n        if (column.isGenerated) {\r\n            if (column.generationStrategy === \"increment\") {\r\n                c += ` INT DEFAULT nextval('${this.buildSequenceName(table, column)}')`;\r\n\r\n            } else if (column.generationStrategy === \"rowid\") {\r\n                c += \" INT DEFAULT unique_rowid()\";\r\n\r\n            } else if (column.generationStrategy === \"uuid\") {\r\n                c += \" UUID DEFAULT gen_random_uuid()\";\r\n            }\r\n        }\r\n        if (!column.isGenerated)\r\n            c += \" \" + this.connection.driver.createFullType(column);\r\n        if (column.charset)\r\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\r\n        if (column.collation)\r\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\r\n        if (!column.isNullable)\r\n            c += \" NOT NULL\";\r\n        if (!column.isGenerated && column.default !== undefined && column.default !== null)\r\n            c += \" DEFAULT \" + column.default;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}