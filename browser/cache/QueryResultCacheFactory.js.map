{"version":3,"sources":["../browser/src/cache/QueryResultCacheFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,qBAAqB,EAAC,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAIxD;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,iCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,wCAAM,GAAN;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK;YAC9B,MAAM,IAAI,KAAK,CAAC,uKAAuK,CAAC,CAAC;QAE7L,IAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAa,CAAC,IAAI,KAAK,OAAO;YACvD,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAE/D,IAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAa,CAAC,IAAI,KAAK,SAAS;YACzD,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAEjE,IAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAa,CAAC,IAAI,KAAK,iBAAiB;YACjE,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;QAEzE,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAEL,8BAAC;AAAD,CAhCA,AAgCC,IAAA","file":"QueryResultCacheFactory.js","sourcesContent":["import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\r\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\r\nimport {QueryResultCache} from \"./QueryResultCache\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Caches query result into Redis database.\r\n */\r\nexport class QueryResultCacheFactory {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query result cache based on connection options.\r\n     */\r\n    create(): QueryResultCache {\r\n        if (!this.connection.options.cache)\r\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\r\n\r\n        if ((this.connection.options.cache as any).type === \"redis\")\r\n            return new RedisQueryResultCache(this.connection, \"redis\");\r\n\r\n        if ((this.connection.options.cache as any).type === \"ioredis\")\r\n            return new RedisQueryResultCache(this.connection, \"ioredis\");\r\n\r\n        if ((this.connection.options.cache as any).type === \"ioredis/cluster\")\r\n            return new RedisQueryResultCache(this.connection, \"ioredis/cluster\");\r\n\r\n        return new DbQueryResultCache(this.connection);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}