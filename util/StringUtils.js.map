{"version":3,"sources":["../../src/util/StringUtils.ts"],"names":[],"mappings":";;AAAA;;;;GAIG;AACH,SAAgB,SAAS,CAAC,GAAW,EAAE,YAA6B;IAA7B,6BAAA,EAAA,oBAA6B;IAChE,OAAO,GAAG,CAAC,OAAO,CAAC,sBAAsB,EAAE,UAAS,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM;QACrE,IAAI,YAAY,KAAK,IAAI,IAAI,MAAM,KAAK,CAAC;YAAE,OAAO,EAAE,CAAC;QACrD,IAAI,EAAE;YAAE,OAAO,EAAE,CAAC,WAAW,EAAE,CAAC;QAChC,OAAO,EAAE,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAND,8BAMC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CAAC,GAAW;IACjC,OAAO,GAAG,CAAC,OAAO,CAAC,6CAA6C,EAAE,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;AACjG,CAAC;AAFD,8BAEC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CAAC,GAAW;IACjC,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAzD,CAAyD,CAAC,CAAC;AACnG,CAAC;AAFD,8BAEC;AAED;;GAEG;AACH,SAAgB,UAAU,CAAC,GAAW,EAAE,gBAA4B;IAA5B,iCAAA,EAAA,oBAA4B;IAChE,IAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClF,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI;QAC1B,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACxC,OAAO,GAAG,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;AACX,CAAC;AAND,gCAMC;AAWC;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAgB,OAAO,CAAC,KAAa,EAAE,OAA6B;IAA7B,wBAAA,EAAA,YAA6B;IAC1D,IAAA,0BAAiB,EAAjB,sCAAiB,EAAE,sBAAgB,EAAhB,qCAAgB,EAAE,uBAAc,EAAd,mCAAc,CAAa;IAExE,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACxC,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,GAAa,EAAE,GAAW;QAC7D,gFAAgF;QAChF,IAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,mCAAmC,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1F,mEAAmE;QACnE,IAAM,MAAM,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QACpE,IAAM,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,EAAtB,CAAsB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE/E,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvB,OAAO,GAAG,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvC,CAAC;AAhBD,0BAgBC","file":"StringUtils.js","sourcesContent":["/**\r\n * Converts string into camelCase.\r\n *\r\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n */\r\nexport function camelCase(str: string, firstCapital: boolean = false): string {\r\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\r\n        if (firstCapital === true && offset === 0) return p1;\r\n        if (p2) return p2.toUpperCase();\r\n        return p1.toLowerCase();\r\n    });\r\n}\r\n\r\n/**\r\n * Converts string into snake-case.\r\n *\r\n * @see https://regex101.com/r/QeSm2I/1\r\n */\r\nexport function snakeCase(str: string) {\r\n    return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts string into title-case.\r\n *\r\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\r\n */\r\nexport function titleCase(str: string): string {\r\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\r\n}\r\n\r\n/**\r\n * Builds abbreviated string from given string;\r\n */\r\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\r\n    const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\r\n    return words.reduce((res, word) => {\r\n        res += word.substr(0, abbrLettersCount);\r\n        return res;\r\n    }, \"\");\r\n}\r\n\r\nexport interface IShortenOptions {\r\n    /** String used to split \"segments\" of the alias/column name */\r\n    separator?: string;\r\n    /** Maximum length of any \"segment\" */\r\n    segmentLength?: number;\r\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\r\n    termLength?: number;\r\n  }\r\n\r\n  /**\r\n   * Shorten a given `input`. Useful for RDBMS imposing a limit on the\r\n   * maximum length of aliases and column names in SQL queries.\r\n   *\r\n   * @param input String to be shortened.\r\n   * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\r\n   *\r\n   * @return Shortened `input`.\r\n   *\r\n   * @example\r\n   * // returns: \"UsShCa__orde__mark__dire\"\r\n   * shorten('UserShoppingCart__order__market__director')\r\n   *\r\n   * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\r\n   * shorten(\r\n   *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\r\n   *   { separator: '_', segmentLength: 3 }\r\n   * )\r\n   *\r\n   * // equals: UsShCa__orde__mark_market_id\r\n   * `${shorten('UserShoppingCart__order__market')}_market_id`\r\n   */\r\n  export function shorten(input: string, options: IShortenOptions = {}): string {\r\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\r\n\r\n    const segments = input.split(separator);\r\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\r\n        // split the given segment into many terms based on an eventual camel cased name\r\n        const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\r\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\r\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\r\n        const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\r\n\r\n        acc.push(shortSegment);\r\n        return acc;\r\n    }, []);\r\n\r\n    return shortSegments.join(separator);\r\n  }\r\n"],"sourceRoot":".."}