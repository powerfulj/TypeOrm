{"version":3,"sources":["../../src/schema-builder/view/View.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH;IAiBI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,cAAY,OAAqB;QAC7B,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;SACxC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,oBAAK,GAAL;QACI,OAAO,IAAI,IAAI,CAAe;YAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAC;IACP,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,WAAM,GAAb,UAAc,cAA8B,EAAE,MAAc;QACxD,IAAM,OAAO,GAAgB;YACzB,IAAI,EAAE,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,QAAQ,CAAC;YACrG,UAAU,EAAE,cAAc,CAAC,UAAW;SACzC,CAAC;QAEF,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEL,WAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,oBAAI","file":"View.js","sourcesContent":["import {Connection, Driver, SelectQueryBuilder} from \"../..\";\r\nimport {EntityMetadata} from \"../..\";\r\nimport {ViewOptions} from \"../options/ViewOptions\";\r\n\r\n/**\r\n * View in the database represented in this class.\r\n */\r\nexport class View {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Contains database name, schema name and table name.\r\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * View definition.\r\n     */\r\n    expression: string|((connection: Connection) => SelectQueryBuilder<any>);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options?: ViewOptions) {\r\n        if (options) {\r\n            this.name = options.name;\r\n            this.expression = options.expression;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table to a new table with all properties cloned.\r\n     */\r\n    clone(): View {\r\n        return new View(<ViewOptions> {\r\n            name: this.name,\r\n            expression: this.expression,\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates view from a given entity metadata.\r\n     */\r\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\r\n        const options: ViewOptions = {\r\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\r\n            expression: entityMetadata.expression!,\r\n        };\r\n\r\n        return new View(options);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}