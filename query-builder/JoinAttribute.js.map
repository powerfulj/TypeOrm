{"version":3,"sources":["../../src/query-builder/JoinAttribute.ts"],"names":[],"mappings":"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","file":"JoinAttribute.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\r\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\r\nimport {Alias} from \"./Alias\";\r\nimport {ObjectUtils} from \"../util/ObjectUtils\";\r\n\r\n/**\r\n * Stores all join attributes which will be used to build a JOIN query.\r\n */\r\nexport class JoinAttribute {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join direction.\r\n     */\r\n    direction: \"LEFT\"|\"INNER\";\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias: Alias;\r\n\r\n    /**\r\n     * Joined table, entity target, or relation in \"post.category\" format.\r\n     */\r\n    entityOrProperty: Function|string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    condition?: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty?: string;\r\n\r\n    /**\r\n     * Indicates if user maps one or many objects from the join.\r\n     */\r\n    isMappingMany?: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection,\r\n                private queryExpressionMap: QueryExpressionMap,\r\n                joinAttribute?: JoinAttribute) {\r\n        ObjectUtils.assign(this, joinAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isMany(): boolean {\r\n        if (this.isMappingMany !== undefined)\r\n            return this.isMappingMany;\r\n\r\n        if (this.relation)\r\n            return this.relation.isManyToMany || this.relation.isOneToMany;\r\n\r\n        return false;\r\n    }\r\n\r\n    \r\n    isSelectedCache: boolean;\r\n    isSelectedEvalueated: boolean = false;\r\n    /**\r\n     * Indicates if this join is selected.\r\n     */\r\n    get isSelected(): boolean {\r\n        if (!this.isSelectedEvalueated) {\r\n            let getValue = () => {\r\n                for (const select of this.queryExpressionMap.selects) {\r\n                    if (select.selection === this.alias.name)\r\n                        return true;\r\n\r\n                    if (this.metadata && !!this.metadata.columns.find(column => select.selection === this.alias.name + \".\" + column.propertyPath))\r\n                        return true;\r\n                }\r\n\r\n                return false;\r\n            };\r\n            this.isSelectedCache = getValue();\r\n            this.isSelectedEvalueated = true;\r\n        }\r\n        return this.isSelectedCache;\r\n\r\n    }\r\n\r\n    /**\r\n     * Name of the table which we should join.\r\n     */\r\n    get tablePath(): string {\r\n        return this.metadata ? this.metadata.tablePath : this.entityOrProperty as string;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\r\n    }\r\n\r\n    relationCache: RelationMetadata|undefined;\r\n    relationEvalueated: boolean = false;\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\r\n     */\r\n    get relation(): RelationMetadata | undefined {\r\n        if (!this.relationEvalueated) {\r\n            let getValue = () => {\r\n                if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n                    return undefined;\r\n\r\n                const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\r\n                let relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n\r\n                if (relation) {\r\n                    return relation;\r\n                }\r\n\r\n                if (relationOwnerSelection.metadata.parentEntityMetadata) {\r\n                    relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n                    if (relation) {\r\n                        return relation;\r\n                    }\r\n                }\r\n\r\n                throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\r\n            };\r\n            this.relationCache = getValue.bind(this)();\r\n            this.relationEvalueated = true;\r\n        }\r\n        return this.relationCache;\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata|undefined {\r\n\r\n        // entityOrProperty is relation, e.g. \"post.category\"\r\n        if (this.relation)\r\n            return this.relation.inverseEntityMetadata;\r\n\r\n        // entityOrProperty is Entity class\r\n        if (this.connection.hasMetadata(this.entityOrProperty))\r\n            return this.connection.getMetadata(this.entityOrProperty);\r\n\r\n        return undefined;\r\n\r\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\r\n\r\n            // first try to find entity with such name, this is needed when entity does not have a target class,\r\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\r\n            if (metadata)\r\n                return metadata;\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\r\n        }*/\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        if (!this.relation)\r\n            throw new Error(`Cannot get junction table for join without relation.`);\r\n\r\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[0];\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[1];\r\n    }\r\n\r\n}"],"sourceRoot":".."}