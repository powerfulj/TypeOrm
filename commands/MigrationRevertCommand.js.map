{"version":3,"sources":["../../src/commands/MigrationRevertCommand.ts"],"names":[],"mappings":";;;AAAA,kCAA0C;AAC1C,iFAA8E;AAG9E,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,kBAAkB,CAAC;QAC7B,aAAQ,GAAG,kCAAkC,CAAC;QAC9C,YAAO,GAAG,mBAAmB,CAAC;IAwDlC,CAAC;IAtDG,wCAAO,GAAP,UAAQ,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,aAAa,EAAE;YACnB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,0FAA0F;SACvG,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,wCAAO,GAAb,UAAc,IAAqB;;;;;;wBAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,mBAAmB,EAAE;4BACnC,OAAO,CAAC,GAAG,CAAC,0EAA0E,CAAC,CAAC;yBAC3F;wBAEG,UAAU,GAAyB,SAAS,CAAC;;;;wBAEvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;4BACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;4BACnB,UAAU,EAAE,IAAI,CAAC,MAAa;yBACjC,CAAC,CAAC;wBACuB,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,EAAA;;wBAA7E,iBAAiB,GAAG,SAAyD;wBACnF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,KAAK;4BAClB,aAAa,EAAE,KAAK;4BACpB,UAAU,EAAE,KAAK;4BACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;yBACxC,CAAC,CAAC;wBACU,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBACjD,OAAO,GAAG;4BACZ,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;yBACpD,CAAC;wBACF,qBAAM,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAA;;wBAA3C,SAA2C,CAAC;wBAC5C,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;6BAGrB,UAAU,EAAV,wBAAU;wBAAE,qBAAO,UAAyB,CAAC,KAAK,EAAE,EAAA;;wBAAxC,SAAwC,CAAC;;;wBAEzD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;wBACjE,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;;KAEvB;IAEL,6BAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,wDAAsB","file":"MigrationRevertCommand.js","sourcesContent":["import {createConnection} from \"../index\";\r\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport * as yargs from \"yargs\";\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Reverts last migration command.\r\n */\r\nexport class MigrationRevertCommand implements yargs.CommandModule {\r\n\r\n    command = \"migration:revert\";\r\n    describe = \"Reverts last executed migration.\";\r\n    aliases = \"migrations:revert\";\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which run a query.\"\r\n            })\r\n            .option(\"transaction\", {\r\n                alias: \"t\",\r\n                default: \"default\",\r\n                describe: \"Indicates if transaction should be used or not for migration revert. Enabled by default.\"\r\n            })\r\n            .option(\"f\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        if (args._[0] === \"migrations:revert\") {\r\n            console.log(\"'migrations:revert' is deprecated, please use 'migration:revert' instead\");\r\n        }\r\n\r\n        let connection: Connection|undefined = undefined;\r\n        try {\r\n            const connectionOptionsReader = new ConnectionOptionsReader({\r\n                root: process.cwd(),\r\n                configName: args.config as any\r\n            });\r\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\r\n            Object.assign(connectionOptions, {\r\n                subscribers: [],\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: [\"query\", \"error\", \"schema\"]\r\n            });\r\n            connection = await createConnection(connectionOptions);\r\n            const options = {\r\n                transaction: args[\"t\"] === \"false\" ? false : true\r\n            };\r\n            await connection.undoLastMigration(options);\r\n            await connection.close();\r\n\r\n        } catch (err) {\r\n            if (connection) await (connection as Connection).close();\r\n\r\n            console.log(chalk.black.bgRed(\"Error during migration revert:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}