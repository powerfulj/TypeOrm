{"version":3,"sources":["../../src/commands/SchemaDropCommand.ts"],"names":[],"mappings":";;;AAAA,kCAA0C;AAE1C,iFAA8E;AAE9E,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,+DAA+D;YACtE,kEAAkE,CAAC;IA8C3E,CAAC;IA5CG,mCAAO,GAAP,UAAQ,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,qDAAqD;SAClE,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,mCAAO,GAAb,UAAc,IAAqB;;;;;;wBAE3B,UAAU,GAAyB,SAAS,CAAC;;;;wBAGvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;4BACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;4BACnB,UAAU,EAAE,IAAI,CAAC,MAAa;yBACjC,CAAC,CAAC;wBACuB,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,EAAA;;wBAA7E,iBAAiB,GAAG,SAAyD;wBACnF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,WAAW,EAAE,KAAK;4BAClB,aAAa,EAAE,KAAK;4BACpB,UAAU,EAAE,KAAK;4BACjB,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;yBAC/B,CAAC,CAAC;wBACU,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBACvD,qBAAM,UAAU,CAAC,YAAY,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;wBAEzB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC,CAAC;;;;6BAGvE,UAAU,EAAV,wBAAU;wBAAE,qBAAO,UAAyB,CAAC,KAAK,EAAE,EAAA;;wBAAxC,SAAwC,CAAC;;;wBAEzD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;wBAC5D,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;;KAEvB;IACL,wBAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,8CAAiB","file":"SchemaDropCommand.js","sourcesContent":["import {createConnection} from \"../index\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport * as yargs from \"yargs\";\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Drops all tables of the database from the given connection.\r\n */\r\nexport class SchemaDropCommand implements yargs.CommandModule {\r\n    command = \"schema:drop\";\r\n    describe = \"Drops all tables in the database on your default connection. \" +\r\n        \"To drop table of a concrete connection's database use -c option.\";\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which to drop all tables.\"\r\n            })\r\n            .option(\"f\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n\r\n        let connection: Connection|undefined = undefined;\r\n        try {\r\n\r\n            const connectionOptionsReader = new ConnectionOptionsReader({\r\n                root: process.cwd(),\r\n                configName: args.config as any\r\n            });\r\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\r\n            Object.assign(connectionOptions, {\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: [\"query\", \"schema\"]\r\n            });\r\n            connection = await createConnection(connectionOptions);\r\n            await connection.dropDatabase();\r\n            await connection.close();\r\n\r\n            console.log(chalk.green(\"Database schema has been successfully dropped.\"));\r\n\r\n        } catch (err) {\r\n            if (connection) await (connection as Connection).close();\r\n\r\n            console.log(chalk.black.bgRed(\"Error during schema drop:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}