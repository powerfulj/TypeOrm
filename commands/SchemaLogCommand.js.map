{"version":3,"sources":["../../src/commands/SchemaLogCommand.ts"],"names":[],"mappings":"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","file":"SchemaLogCommand.js","sourcesContent":["import {createConnection} from \"../index\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport {highlight} from \"cli-highlight\";\r\nimport * as yargs from \"yargs\";\r\n\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Shows sql to be executed by schema:sync command.\r\n */\r\nexport class SchemaLogCommand implements yargs.CommandModule {\r\n\r\n    command = \"schema:log\";\r\n    describe = \"Shows sql to be executed by schema:sync command. It shows sql log only for your default connection. \" +\r\n        \"To run update queries on a concrete connection use -c option.\";\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection of which schema sync log should be shown.\"\r\n            })\r\n            .option(\"f\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n\r\n        let connection: Connection|undefined = undefined;\r\n        try {\r\n\r\n            const connectionOptionsReader = new ConnectionOptionsReader({\r\n                root: process.cwd(),\r\n                configName: args.config as any\r\n            });\r\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\r\n            Object.assign(connectionOptions, {\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: false\r\n            });\r\n            connection = await createConnection(connectionOptions);\r\n            const sqlInMemory = await connection.driver.createSchemaBuilder().log();\r\n            if (sqlInMemory.upQueries.length === 0) {\r\n                console.log(chalk.yellow(\"Your schema is up to date - there are no queries to be executed by schema syncronization.\"));\r\n\r\n            } else {\r\n                const lengthSeparators = String(sqlInMemory.upQueries.length).split(\"\").map(char => \"-\").join(\"\");\r\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\r\n                console.log(chalk.yellow.bold(`-- Schema syncronization will execute following sql queries (${chalk.white(sqlInMemory.upQueries.length)}):`));\r\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\r\n\r\n                sqlInMemory.upQueries.forEach(upQuery => {\r\n                    let sqlString = upQuery.query;\r\n                    sqlString = sqlString.trim();\r\n                    sqlString = sqlString.substr(-1) === \";\" ? sqlString : sqlString + \";\";\r\n                    console.log(highlight(sqlString));\r\n                });\r\n            }\r\n            await connection.close();\r\n\r\n        } catch (err) {\r\n            if (connection)\r\n\r\n            console.log(chalk.black.bgRed(\"Error during schema synchronization:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}