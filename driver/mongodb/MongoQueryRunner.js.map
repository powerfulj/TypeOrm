{"version":3,"sources":["../../src/driver/mongodb/MongoQueryRunner.ts"],"names":[],"mappings":";;;AA8CA,4DAA2D;AAG3D,6FAA4F;AAC5F,qFAAoF;AAEpF;;GAEG;AACH;IA4DI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,0BAAY,UAAsB,EAAE,kBAA+B;QA3CnE;;;;WAIG;QACH,eAAU,GAAG,KAAK,CAAC;QAEnB;;;WAGG;QACH,wBAAmB,GAAG,KAAK,CAAC;QAE5B;;;WAGG;QACH,SAAI,GAAG,EAAE,CAAC;QA2BN,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,iCAAM,GAAN,UAAO,cAAsB,EAAE,KAAqB;QAChD,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACH,oCAAS,GAAT,UAAU,cAAsB,EAAE,QAAyB,EAAE,OAAsC;QAC/F,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAA+B,OAAO,CAAC,CAAC,CAAC;IACnI,CAAC;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,UAA2B,EAAE,OAAoC;;;;4BAC9F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAA6B,OAAO,CAAC,CAAC,EAAA;4BAApI,sBAAO,SAA6H,EAAC;;;;KACxI;IAED;;OAEG;IACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,KAAqB,EAAE,OAA+B;;;;4BAC/E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAwB,OAAO,CAAC,CAAC,EAAA;4BAArI,sBAAO,SAA8H,EAAC;;;;KACzI;IAED;;OAEG;IACG,gDAAqB,GAA3B,UAA4B,cAAsB,EAAE,WAAyB,EAAE,OAA6B;;;;4BACjG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAsB,OAAO,CAAC,CAAC,EAAA;4BAAhI,sBAAO,SAAyH,EAAC;;;;KACpI;IAED;;;OAGG;IACG,kDAAuB,GAA7B,UAA8B,cAAsB,EAAE,UAA2B;;;;4BACtE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,EAAA;4BAAzE,sBAAO,SAAkE,EAAC;;;;KAC7E;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,OAA2B;;;;4BAC/E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,EAAA;4BAAvH,sBAAO,SAAgH,EAAC;;;;KAC3H;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,KAAoB,EAAE,OAA2B;;;;4BAC9E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,EAAA;4BAAtH,sBAAO,SAA+G,EAAC;;;;KAC1H;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,cAAsB,EAAE,GAAW,EAAE,KAAoB,EAAE,OAA+E;;;;4BAC9I,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAwE,OAAO,CAAC,CAAC,EAAA;4BAA9K,sBAAO,SAAuK,EAAC;;;;KAClL;IAED;;OAEG;IACG,8CAAmB,GAAzB,UAA0B,cAAsB,EAAE,SAAiB,EAAE,OAA2B;;;;4BACrF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,EAAA;4BAA1H,sBAAO,SAAmH,EAAC;;;;KAC9H;IAED;;OAEG;IACG,gDAAqB,GAA3B,UAA4B,cAAsB;;;;4BACvC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,EAAA;4BAA7D,sBAAO,SAAsD,EAAC;;;;KACjE;IAED;;OAEG;IACG,2CAAgB,GAAtB,UAAuB,cAAsB,EAAE,KAAoB,EAAE,OAA6F;;;;4BACvJ,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAsF,OAAO,CAAC,CAAC,EAAA;4BAA/L,sBAAO,SAAwL,EAAC;;;;KACnM;IAED;;OAEG;IACG,4CAAiB,GAAvB,UAAwB,cAAsB,EAAE,KAAoB,EAAE,WAAmB,EAAE,OAAiC;;;;4BACjH,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAA0B,OAAO,CAAC,CAAC,EAAA;4BAAjJ,sBAAO,SAA0I,EAAC;;;;KACrJ;IAED;;OAEG;IACG,2CAAgB,GAAtB,UAAuB,cAAsB,EAAE,KAAoB,EAAE,MAAc,EAAE,OAAiC;;;;4BAC3G,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAA0B,OAAO,CAAC,CAAC,EAAA;4BAA3I,sBAAO,SAAoI,EAAC;;;;KAC/I;IAED;;OAEG;IACG,4CAAiB,GAAvB,UAAwB,cAAsB,EAAE,CAAS,EAAE,CAAS,EAAE,OAAkC;;;;4BAC7F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAA2B,OAAO,CAAC,CAAC,EAAA;4BAApI,sBAAO,SAA6H,EAAC;;;;KACxI;IAED;;OAEG;IACG,kCAAO,GAAb,UAAc,cAAsB,EAAE,CAAS,EAAE,CAAS,EAAE,OAAwB;;;;4BACzE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAiB,OAAO,CAAC,CAAC,EAAA;4BAAhH,sBAAO,SAAyG,EAAC;;;;KACpH;IAED;;OAEG;IACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,IAA2C,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAuB,EAAE,QAAyB,EAAE,OAAgB,EAAE,OAA+E;;;;4BAC/P,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAwE,OAAO,CAAC,CAAC,EAAA;4BAApN,sBAAO,SAA6M,EAAC;;;;KACxN;IAED;;OAEG;IACG,4CAAiB,GAAvB,UAAwB,cAAsB;;;;4BACnC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAA;4BAAzD,sBAAO,SAAkD,EAAC;;;;KAC7D;IAED;;OAEG;IACG,gDAAqB,GAA3B,UAA4B,cAAsB,EAAE,OAA0B;;;;4BACnE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;4BAApE,sBAAO,SAA6D,EAAC;;;;KACxE;IAED;;OAEG;IACG,qDAA0B,GAAhC,UAAiC,cAAsB,EAAE,OAAoD;;;;4BAClG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAA6C,OAAO,CAAC,CAAC,EAAA;4BAA/I,sBAAO,SAAwI,EAAC;;;;KACnJ;IAED;;OAEG;IACH,kDAAuB,GAAvB,UAAwB,cAAsB,EAAE,OAA2B;QACvE,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,uBAAuB,CAAC,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,CAAC;IAC5H,CAAC;IAED;;OAEG;IACH,oDAAyB,GAAzB,UAA0B,cAAsB,EAAE,OAA2B;QACzE,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,yBAAyB,CAAC,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,CAAC;IAC9H,CAAC;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,IAAqB,EAAE,OAAqC;;;;4BAC1F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAA8B,OAAO,CAAC,CAAC,EAAA;4BAAhI,sBAAO,SAAyH,EAAC;;;;KACpI;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,GAAkB,EAAE,OAAoC;;;;4BACrF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAA6B,OAAO,CAAC,CAAC,EAAA;4BAA7H,sBAAO,SAAsH,EAAC;;;;KACjI;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,cAAsB;;;;4BAC1B,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,EAAA;4BAA1D,sBAAO,SAAmD,EAAC;;;;KAC9D;IAED;;OAEG;IACH,gDAAqB,GAArB,UAAsB,cAAsB,EAAE,OAAmG;QAC7I,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAA4F,OAAO,CAAC,CAAC,CAAC;IACxL,CAAC;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,GAAsB,EAAE,MAAyB,EAAE,OAA0B;;;;4BAC1G,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAmB,OAAO,CAAC,CAAC,EAAA;4BAA3H,sBAAO,SAAoH,EAAC;;;;KAC/H;IAED;;;OAGG;IACG,iDAAsB,GAA5B,UAA6B,cAAsB,EAAE,OAAuC;;;;4BACjF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,mBAAmB,CAAgC,OAAO,CAAC,CAAC,EAAA;4BAAxI,sBAAO,SAAiI,EAAC;;;;KAC5I;IAED;;OAEG;IACG,kCAAO,GAAb,UAAc,cAAsB;;;;4BACzB,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAA;4BAAzD,sBAAO,SAAkD,EAAC;;;;KAC7D;IAED;;OAEG;IACG,iCAAM,GAAZ,UAAa,cAAsB,EAAE,OAAe,EAAE,OAA2D;;;;4BACtG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAoD,OAAO,CAAC,CAAC,EAAA;4BAArJ,sBAAO,SAA8I,EAAC;;;;KACzJ;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,GAAkB,EAAE,OAA2B;;;;4BACnG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,EAAA;4BAA5H,sBAAO,SAAqH,EAAC;;;;KAChI;IAED;;OAEG;IACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,OAAoD;;;;4BAC7E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAA6C,OAAO,CAAC,CAAC,EAAA;4BAApI,sBAAO,SAA6H,EAAC;;;;KACxI;IAED;;OAEG;IACH,gCAAK,GAAL,UAAM,cAAsB,EAAE,QAAmB,EAAE,OAA6B;QAC5E,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAsB,OAAO,CAAC,CAAC,CAAC;IACtH,CAAC;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAAoH;;;;4BAC/L,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAA6G,OAAO,CAAC,CAAC,EAAA;4BAAxN,sBAAO,SAAiN,EAAC;;;;KAC5N;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAA2B;;;;4BACrG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAoB,OAAO,CAAC,CAAC,EAAA;4BAA9H,sBAAO,SAAuH,EAAC;;;;KAClI;IAED,4EAA4E;IAC5E,gDAAgD;IAChD,4EAA4E;IAE5E;;;;OAIG;IACG,wCAAa,GAAnB;;;;4BACI,qBAAM,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC,YAAY,EAAE,EAAA;;wBAAjF,SAAiF,CAAC;;;;;KACrF;IAED;;OAEG;IACG,kCAAO,GAAb;;;;;;KACC;IAED;;OAEG;IACG,kCAAO,GAAb;;;;;;KACC;IAED;;OAEG;IACG,2CAAgB,GAAtB;;;gBACI,IAAI,IAAI,CAAC,OAAO;oBACZ,MAAM,IAAI,+DAA8B,EAAE,CAAC;gBAC/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBAChC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;gBACtD,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;;;;KACnC;IAED;;OAEG;IACG,4CAAiB,GAAvB;;;;;;;wBAEQ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;4BACf,MAAM,IAAI,uDAA0B,EAAE,CAAC;yBAC1C;wBACD,qBAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAA;;wBAAtC,SAAsC,CAAC;;;;wBAEvC,MAAM,GAAC,CAAC;;wBAER,IAAI,IAAI,CAAC,OAAO,EAAE;4BACd,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;4BAC1B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;yBAC5B;;;;;;KAER;IAED;;OAEG;IACG,8CAAmB,GAAzB;;;;;;;wBAEQ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;4BACf,MAAM,IAAI,uDAA0B,EAAE,CAAC;yBAC1C;wBACD,qBAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAA;;wBAArC,SAAqC,CAAC;;;;wBAEtC,MAAM,GAAC,CAAC;;wBAER,IAAI,IAAI,CAAC,OAAO,EAAE;4BACd,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;4BAC1B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;yBAC5B;;;;;;KAER;IAED;;OAEG;IACH,gCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QACnC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC/E,CAAC;IAED;;OAEG;IACH,iCAAM,GAAN,UAAO,KAAa,EAAE,UAAkB,EAAE,KAAgB,EAAE,OAAkB;QAC1E,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IACrF,CAAC;IAED;;;;;;;;;;;;;OAaG;IAEH;;;;;;;OAOG;IAEH;;;;;;;;;;OAUG;IAEH;;OAEG;IACG,uCAAY,GAAlB;;;gBACI,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;;OAGG;IACG,qCAAU,GAAhB,UAAiB,QAAiB;;;gBAC9B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,cAAsB;;;gBACjC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,eAAyB;;;gBACrC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,kCAAO,GAAb,UAAc,cAAsB;;;gBAChC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,eAAyB;;;gBACpC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,QAAgB;;;gBAC9B,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;;;KAClF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,MAAc;;;gBAC1B,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;;;KAChF;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,cAAsB;;;gBACjC,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;;;KAChF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,WAA2B,EAAE,UAAkB;;;gBAC3D,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,yCAAc,GAApB,UAAqB,QAAgB;;;gBACjC,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;;;KACnF;IAED;;OAEG;IACG,uCAAY,GAAlB,UAAmB,QAAgB,EAAE,OAAiB;;;gBAClD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,uCAAY,GAAlB,UAAmB,MAAc,EAAE,UAAoB;;;gBACnD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,UAAkB,EAAE,OAAiB;;;gBAClD,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;;;KAC/E;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,KAAY;;;gBAC1B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,SAAyB;;;gBACrC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,IAAU;;;gBACvB,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,mCAAQ,GAAd,UAAe,MAAmB;;;gBAC9B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,cAA8B,EAAE,cAA8B;;;gBAC5E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,WAA2B,EAAE,MAAmB;;;gBAC5D,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,WAA2B,EAAE,OAAsB;;;gBAChE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,uCAAY,GAAlB,UAAmB,WAA2B,EAAE,oBAA0C,EAAE,oBAA0C;;;gBAClI,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,uCAAY,GAAlB,UAAmB,WAA2B,EAAE,oBAA0C,EAAE,SAAsB;;;gBAC9G,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,wCAAa,GAAnB,UAAoB,WAA2B,EAAE,cAAoE;;;gBACjH,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,WAA2B,EAAE,YAAkC;;;gBAC5E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,WAA2B,EAAE,OAAsB;;;gBACjE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,2CAAgB,GAAtB,UAAuB,WAA2B,EAAE,WAAqB;;;gBACrE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,4CAAiB,GAAvB,UAAwB,WAA2B,EAAE,OAAsB;;;gBACvE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,yCAAc,GAApB,UAAqB,WAA2B;;;gBAC5C,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,iDAAsB,GAA5B,UAA6B,WAA2B,EAAE,gBAA6B;;;gBACnF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,kDAAuB,GAA7B,UAA8B,WAA2B,EAAE,iBAAgC;;;gBACvF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,+CAAoB,GAA1B,UAA2B,WAA2B,EAAE,YAAkC;;;gBACtF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,gDAAqB,GAA3B,UAA4B,WAA2B,EAAE,iBAAgC;;;gBACrF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,gDAAqB,GAA3B,UAA4B,WAA2B,EAAE,eAA2B;;;gBAChF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,iDAAsB,GAA5B,UAA6B,WAA2B,EAAE,gBAA8B;;;gBACpF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,8CAAmB,GAAzB,UAA0B,WAA2B,EAAE,WAAgC;;;gBACnF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,+CAAoB,GAA1B,UAA2B,WAA2B,EAAE,gBAA8B;;;gBAClF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,oDAAyB,GAA/B,UAAgC,WAA2B,EAAE,mBAAmC;;;gBAC5F,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qDAA0B,GAAhC,UAAiC,WAA2B,EAAE,oBAAsC;;;gBAChG,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,kDAAuB,GAA7B,UAA8B,WAA2B,EAAE,eAAwC;;;gBAC/F,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,mDAAwB,GAA9B,UAA+B,WAA2B,EAAE,oBAAsC;;;gBAC9F,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,2CAAgB,GAAtB,UAAuB,WAA2B,EAAE,UAA2B;;;gBAC3E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,4CAAiB,GAAvB,UAAwB,WAA2B,EAAE,WAA8B;;;gBAC/E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,yCAAc,GAApB,UAAqB,WAA2B,EAAE,UAA2B;;;gBACzE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,0CAAe,GAArB,UAAsB,WAA2B,EAAE,WAA8B;;;gBAC7E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,WAA2B,EAAE,KAAiB;;;gBAC5D,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,wCAAa,GAAnB,UAAoB,WAA2B,EAAE,OAAqB;;;gBAClE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,SAAiB;;;gBACrD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,sCAAW,GAAjB,UAAkB,WAA2B,EAAE,OAAqB;;;gBAChE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;KACjF;IAED;;OAEG;IACG,qCAAU,GAAhB,UAAiB,cAAsB;;;;4BACnC,qBAAM,IAAI,CAAC,kBAAkB;6BACxB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC;6BACpC,cAAc,CAAC,cAAc,CAAC,EAAA;;wBAFnC,SAEmC,CAAC;;;;;KACvC;IAED;;;;OAIG;IACH,0CAAe,GAAf;QACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;OAKG;IACH,2CAAgB,GAAhB;QACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,yCAAc,GAAd;QACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,uCAAY,GAAZ;QACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACG,6CAAkB,GAAxB;;;gBACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;;;KACzE;IAED;;OAEG;IACG,+CAAoB,GAA1B;;;gBACI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;;;KACzE;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,wCAAa,GAAvB,UAAwB,cAAsB;QAC1C,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACnG,CAAC;IAED;;OAEG;IACO,8CAAmB,GAA7B,UAAiC,OAAY;QACzC,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;aAClC;iBAAM;gBACH,OAAO,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aACvC;YACD,OAAO,OAAY,CAAC;SACvB;QACD,OAAO,OAAY,CAAC;IACxB,CAAC;IACL,uBAAC;AAAD,CAt2BA,AAs2BC,IAAA;AAt2BY,4CAAgB","file":"MongoQueryRunner.js","sourcesContent":["import { QueryRunner } from \"../../query-runner/QueryRunner\";\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\r\nimport { Table } from \"../../schema-builder/table/Table\";\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\r\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\r\nimport {View} from \"../../schema-builder/view/View\";\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    ChangeStream,\r\n    ChangeStreamOptions,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBulkWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult,\r\n    MongoClient,\r\n    ClientSession\r\n} from \"./typings\";\r\nimport { Connection } from \"../../connection/Connection\";\r\nimport { ReadStream } from \"../../platform/PlatformTools\";\r\nimport { MongoEntityManager } from \"../../entity-manager/MongoEntityManager\";\r\nimport { SqlInMemory } from \"../SqlInMemory\";\r\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\r\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\r\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\";\r\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\r\n\r\n/**\r\n * Runs queries on a single MongoDB connection.\r\n */\r\nexport class MongoQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Broadcaster used on this query runner to broadcast entity events.\r\n     */\r\n    broadcaster: Broadcaster;\r\n\r\n    /**\r\n     * Entity manager working only with current query runner.\r\n     */\r\n    manager: MongoEntityManager;\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     * Always false for mongodb since mongodb has a single query executor instance.\r\n     */\r\n    isReleased = false;\r\n\r\n    /**\r\n     * Indicates if transaction is active in this query executor.\r\n     * Always false for mongodb since mongodb does not support transactions.\r\n     */\r\n    isTransactionActive = false;\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {};\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    loadedTables: Table[];\r\n\r\n    /**\r\n     * All synchronized views in the database.\r\n     */\r\n    loadedViews: View[];\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    databaseConnection: MongoClient;\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    session?: ClientSession;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, databaseConnection: MongoClient) {\r\n        this.connection = connection;\r\n        this.databaseConnection = databaseConnection;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    cursor(collectionName: string, query?: ObjectLiteral): Cursor<any> {\r\n        return this.getCollection(collectionName).find(query || {});\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(collectionName: string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<any> {\r\n        return this.getCollection(collectionName).aggregate(pipeline, this.addSessionToOptions<CollectionAggregationOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(collectionName: string, operations: ObjectLiteral[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).bulkWrite(operations, this.addSessionToOptions<CollectionBulkWriteOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(collectionName: string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.getCollection(collectionName).countDocuments(query || {}, this.addSessionToOptions<MongoCountPreferences>(options));\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(collectionName: string, fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string> {\r\n        return await this.getCollection(collectionName).createIndex(fieldOrSpec, this.addSessionToOptions<MongodbIndexOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(collectionName: string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.getCollection(collectionName).createIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteMany(query, this.addSessionToOptions<CollectionOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteOne(query, this.addSessionToOptions<CollectionOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(collectionName: string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference | string, session?: ClientSession }): Promise<any> {\r\n        return await this.getCollection(collectionName).distinct(key, query, this.addSessionToOptions<{ readPreference?: ReadPreference | string, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(collectionName: string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndex(indexName, this.addSessionToOptions<CollectionOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(collectionName: string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number, session?: ClientSession }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndDelete(query, this.addSessionToOptions<{ projection?: Object, sort?: Object, maxTimeMS?: number, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(collectionName: string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndReplace(query, replacement, this.addSessionToOptions<FindOneAndReplaceOption>(options));\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(collectionName: string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndUpdate(query, update, this.addSessionToOptions<FindOneAndReplaceOption>(options));\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(collectionName: string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoHaystackSearch(x, y, this.addSessionToOptions<GeoHaystackSearchOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(collectionName: string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoNear(x, y, this.addSessionToOptions<GeoNearOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(collectionName: string, keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: { readPreference?: ReadPreference | string, session?: ClientSession }): Promise<any> {\r\n        return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, this.addSessionToOptions<{ readPreference?: ReadPreference | string, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).indexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(collectionName: string, indexes: string | string[]): Promise<boolean> {\r\n        return await this.getCollection(collectionName).indexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(collectionName: string, options?: { full: boolean, session?: ClientSession }): Promise<any> {\r\n        return await this.getCollection(collectionName).indexInformation(this.addSessionToOptions<{ full: boolean, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(collectionName: string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeOrderedBulkOp(this.addSessionToOptions<CollectionOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(collectionName: string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(this.addSessionToOptions<CollectionOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(collectionName: string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertMany(docs, this.addSessionToOptions<CollectionInsertManyOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(collectionName: string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertOne(doc, this.addSessionToOptions<CollectionInsertOneOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(collectionName: string, options?: { batchSize?: number, readPreference?: ReadPreference | string, session?: ClientSession }): CommandCursor {\r\n        return this.getCollection(collectionName).listIndexes(this.addSessionToOptions<{ batchSize?: number, readPreference?: ReadPreference | string, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(collectionName: string, map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).mapReduce(map, reduce, this.addSessionToOptions<MapReduceOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(collectionName: string, options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]> {\r\n        return await this.getCollection(collectionName).parallelCollectionScan(this.addSessionToOptions<ParallelCollectionScanOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(collectionName: string, newName: string, options?: { dropTarget?: boolean, session?: ClientSession }): Promise<Collection<any>> {\r\n        return await this.getCollection(collectionName).rename(newName, this.addSessionToOptions<{ dropTarget?: boolean, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(collectionName: string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).replaceOne(query, doc, this.addSessionToOptions<ReplaceOneOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(collectionName: string, options?: { scale: number, session?: ClientSession }): Promise<CollStats> {\r\n        return await this.getCollection(collectionName).stats(this.addSessionToOptions<{ scale: number, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Watching new changes as stream.\r\n     */\r\n    watch(collectionName: string, pipeline?: Object[], options?: ChangeStreamOptions): ChangeStream {\r\n        return this.getCollection(collectionName).watch(pipeline, this.addSessionToOptions<ChangeStreamOptions>(options));\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean, arrayFilters?: any, session?: ClientSession }): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateMany(query, update, this.addSessionToOptions<{ upsert?: boolean, w?: any, wtimeout?: number, j?: boolean, arrayFilters?: any, session?: ClientSession }>(options));\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateOne(query, update, this.addSessionToOptions<ReplaceOneOptions>(options));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods (from QueryRunner)\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes all collections from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.databaseConnection.db(this.connection.driver.database!).dropDatabase();\r\n    }\r\n\r\n    /**\r\n     * For MongoDB database we don't create connection, because its single connection already created by a driver.\r\n     */\r\n    async connect(): Promise<any> {\r\n    }\r\n\r\n    /**\r\n     * For MongoDB database we don't release connection, because its single connection.\r\n     */\r\n    async release(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        if (this.session)\r\n            throw new TransactionAlreadyStartedError();\r\n        this.isTransactionActive = true;\r\n        this.session = this.databaseConnection.startSession();\r\n        this.session.startTransaction();\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        try {\r\n            if (!this.session) {\r\n                throw new TransactionNotStartedError();\r\n            }\r\n            await this.session.commitTransaction();\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            if (this.session) {\r\n                this.session.endSession();\r\n                this.session = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        try {\r\n            if (!this.session) {\r\n                throw new TransactionNotStartedError();\r\n            }\r\n            await this.session.abortTransaction();\r\n        } catch (e) {\r\n            throw e;\r\n        } finally {\r\n            if (this.session) {\r\n                this.session.endSession();\r\n                this.session = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Executing SQL query is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        throw new Error(`Stream is not supported by MongoDB driver. Use watch instead.`);\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of inserted object id.\r\n\r\n    async insert(collectionName: string, keyValues: ObjectLiteral): Promise<any> { // todo: fix any\r\n        const results = await this.databaseConnection\r\n            .collection(collectionName)\r\n            .insertOne(keyValues);\r\n        const generatedMap = this.connection.getMetadata(collectionName).objectIdColumn!.createValueMap(results.insertedId);\r\n        return {\r\n            result: results,\r\n            generatedMap: generatedMap\r\n        };\r\n    }*/\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n\r\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<any> { // todo: fix any\r\n        await this.databaseConnection\r\n            .collection(collectionName)\r\n            .updateOne(conditions, valuesMap);\r\n    }*/\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n\r\n    async delete(collectionName: string, conditions: ObjectLiteral|ObjectLiteral[]|string, maybeParameters?: any[]): Promise<any> { // todo: fix any\r\n        if (typeof conditions === \"string\")\r\n            throw new Error(`String condition is not supported by MongoDB driver.`);\r\n\r\n        await this.databaseConnection\r\n            .collection(collectionName)\r\n            .deleteOne(conditions);\r\n    }*/\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(collectionName: string): Promise<Table | undefined> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getTables(collectionNames: string[]): Promise<Table[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads given views's data from the database.\r\n     */\r\n    async getView(collectionName: string): Promise<View | undefined> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads all views (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getViews(collectionNames: string[]): Promise<View[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        throw new Error(`Check database queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        throw new Error(`Check schema queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(collectionName: string): Promise<boolean> {\r\n        throw new Error(`Check schema queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableOrName: Table | string, columnName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a database if it's not created.\r\n     */\r\n    async createDatabase(database: string): Promise<void> {\r\n        throw new Error(`Database create queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        throw new Error(`Database drop queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\r\n        throw new Error(`Schema create queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        throw new Error(`Schema drop queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table and columns inside it.\r\n     */\r\n    async createTable(table: Table): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: Table | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(view: View): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(oldTableOrName: Table | string, newTableOrName: Table | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrName: Table | string, column: TableColumn): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table | string, columns: TableColumn[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table | string, oldTableColumnOrName: TableColumn | string, newTableColumnOrName: TableColumn | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table | string, oldTableColumnOrName: TableColumn | string, newColumn: TableColumn): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableOrName: Table | string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableOrName: Table | string, columnOrName: TableColumn | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableOrName: Table | string, columns: TableColumn[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(tableOrName: Table | string, columnNames: string[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableOrName: Table | string, columns: TableColumn[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(tableOrName: Table | string, uniqueConstraint: TableUnique): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(tableOrName: Table | string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraint.\r\n     */\r\n    async dropUniqueConstraint(tableOrName: Table | string, uniqueOrName: TableUnique | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(tableOrName: Table | string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    async createCheckConstraint(tableOrName: Table | string, checkConstraint: TableCheck): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraints.\r\n     */\r\n    async createCheckConstraints(tableOrName: Table | string, checkConstraints: TableCheck[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(tableOrName: Table | string, checkOrName: TableCheck | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(tableOrName: Table | string, checkConstraints: TableCheck[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(tableOrName: Table | string, exclusionConstraint: TableExclusion): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(tableOrName: Table | string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(tableOrName: Table | string, exclusionOrName: TableExclusion | string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(tableOrName: Table | string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table | string, foreignKey: TableForeignKey): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table | string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrName: Table | string, foreignKey: TableForeignKey): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table | string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableOrName: Table | string, index: TableIndex): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(tableOrName: Table | string, indices: TableIndex[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(tableOrName: Table | string, indices: TableIndex[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops collection.\r\n     */\r\n    async clearTable(collectionName: string): Promise<void> {\r\n        await this.databaseConnection\r\n            .db(this.connection.driver.database!)\r\n            .dropCollection(collectionName);\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Flushes all memorized sqls.\r\n     */\r\n    clearSqlMemory(): void {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): SqlInMemory {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    async executeMemoryUpSql(): Promise<void> {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    async executeMemoryDownSql(): Promise<void> {\r\n        throw new Error(`This operation is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets collection from the database with a given name.\r\n     */\r\n    protected getCollection(collectionName: string): Collection<any> {\r\n        return this.databaseConnection.db(this.connection.driver.database!).collection(collectionName);\r\n    }\r\n\r\n    /**\r\n     * Add session to options if session is used.\r\n     */\r\n    protected addSessionToOptions<T>(options: any): T {\r\n        if (this.isTransactionActive) {\r\n            if (options) {\r\n                options.session = this.session;\r\n            } else {\r\n                options = { session: this.session };\r\n            }\r\n            return options as T;\r\n        } \r\n        return options as T;\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}